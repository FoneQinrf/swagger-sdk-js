/**
 * @Description: {{summary}}
 * @requestName: {{methodName}}
 */
export const {{&methodName}} = function(parameters = {}) {
    let domain = parameters.$domain ? parameters.$domain : getDomain()
    let config = parameters.$config
    let form = {}
    let body
    let path = '{{path}}'
    let queryParameters = {}
    {{#parameters}}
        {{#isQueryParameter}}
        if(parameters['{{&name}}'] !== undefined) {
            queryParameters['{{&name}}'] = parameters['{{&name}}']
            }
        {{/isQueryParameter}}

        {{#isPathParameter}}
            path = path.replace('{{name}}', `${parameters['{{&name}}']}`)
        {{/isPathParameter}}

        {{#isBodyParameter}}
            if(parameters['{{&name}}'] !== undefined) {
                body = parameters['{{&name}}']
            }
        {{/isBodyParameter}}

        {{#isFormParameter}}
            if(parameters['{{&name}}'] !== undefined) {
                form['{{&name}}'] = parameters['{{&name}}']
            }
        {{/isFormParameter}}
        {{#if isHeaderParameter}}
        {{else}}
        {{#if required}}
            if(parameters['{{name}}'] === undefined) {
                return Promise.reject(new Error('Missing required {{methodName}} parameter: {{name}}'))
            }
        {{/if}}
        {{/if}}
    {{/parameters}}

    if (parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
            queryParameters[parameterName] = parameters.$queryParameters[parameterName]
        });
    }

    return request('{{method}}', domain + path, body, queryParameters, form, config)
}

/**
 *  @Description: request url
 *  @return url
 */
export const {{&methodName}}_URL = function(parameters = {}) {
    return '{{path}}'
}

/**
 *  @Description: request type
 *  @return method
 */
export const {{&methodName}}_TYPE = function(parameters = {}) {
    return '{{method}}'
}